- name: Setup stateful services
  hosts: _manual
  become: true
  tasks:
    - name: Create a ts dir if it does not exist
      ansible.builtin.file:
        path: /ts
        state: directory
        mode: '0755'

    - name: Copy file from host to machine
      copy:
        src: "{{ playbook_dir }}/docker-compose.yml"
        dest: /ts/docker-compose.yml


  
    - name: Create and start services
      community.docker.docker_compose:
        project_src: /ts/
      register: output

    - debug:
        var: output

- name: Pull latest image for ts
  hosts: _worker
  become: true
  vars:
    image_name: ghcr.io/samagra-comms/transport-socket
    image_tag: akai
  tasks:
    - name: pull an image
      docker_image:
        name: "{{ image_name }}:{{ image_tag }}"
        source: "pull"
        state: "present"
        force_source: true
      register: output

    - debug:
        var: output

- name: Create Docker service on Swarm cluster
  hosts: _manager
  become: true
  vars:
    service_name: ts
    image_name: ghcr.io/samagra-comms/transport-socket
    image_tag: akai
    replicas: 
    container_port: 3000
    published_port: 3000
  tasks:
    - name: Verify if service exists
      docker_swarm_info:
        services_filters:
          name: "{{ service_name }}"
        services: yes
      register: swarm_service

    - name: Create Docker service
      docker_swarm_service:
        name: "{{ service_name }}"
        image: "{{ image_name }}:{{ image_tag }}"
        replicas: "{{ replicas }}"
        logging:
          driver: syslog
          options:
            syslog-address: "udp://10.3.1.6:12201"
            tag: ts
        force_update: yes
        placement:
          constraints:
            - node.labels.node_vm_type == non_gpu
            - node.role == worker
        env:
          "{{ lookup('community.hashi_vault.hashi_vault', 'secret=secret/data/prod/ts') }}"
        publish:
          - published_port: "{{ published_port }}"
            target_port: "{{ container_port }}"
            protocol: tcp
            mode: ingress
        state: present

