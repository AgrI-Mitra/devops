- name: Setup stateful services
  hosts: _manual
  become: true
  vars:
    vault_secrets: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=secret/data/prod/fusionauth_db') }}"
  tasks:
    - name: Create a fusionauth dir if it does not exist
      ansible.builtin.file:
        path: /fusionauth
        state: directory
        mode: '0755'

    - name: Copy file from host to machine
      copy:
        src: "{{ playbook_dir }}/docker-compose.yml"
        dest: /fusionauth/docker-compose.yml


    - name: Generate .env file from vault lookup
      copy:
        dest: /fusionauth/.env
        content: |
          {% for key, value in vault_secrets.items() %}
          {{ key }}={{ value }}
          {% endfor %}          

    - name: Create and start services
      community.docker.docker_compose:
        project_src: /fusionauth/
        env_file: /fusionauth/.env
      register: output

    - debug:
        var: output

- name: Create Docker service on Swarm cluster
  hosts: _manager
  become: true
  vars:
    service_name: fusionauth
    image_name: fusionauth/fusionauth-app
    image_tag: latest
    replicas: 0
    container_port: 9011
    published_port: 9011
  tasks:
    - name: Verify if service exists
      docker_swarm_info:
        services_filters:
          name: "{{ service_name }}"
        services: yes
      register: swarm_service

    - name: Create Docker service
      docker_swarm_service:
        name: "{{ service_name }}"
        image: "{{ image_name }}:{{ image_tag }}"
        replicas: "{{ replicas }}"
        logging:
          driver: syslog
          options:
            syslog-address: "udp://10.3.1.6:12201"
            tag: fusionauth
        placement:
          constraints:
            - node.role == worker
        force_update: yes
        env:
          "{{ lookup('community.hashi_vault.hashi_vault', 'secret=secret/data/prod/fusionauth') }}"
        publish:
          - published_port: "{{ published_port }}"
            target_port: "{{ container_port }}"
            protocol: tcp
            mode: ingress
        state: present
